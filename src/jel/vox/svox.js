"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.SVox = void 0;
var flatbuffers = require("flatbuffers");
var svox_chunk_1 = require("../vox/svox-chunk");
var stack_axis_1 = require("../vox/stack-axis");
var SVox = /** @class */ (function () {
    function SVox() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SVox.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SVox.getRootAsSVox = function (bb, obj) {
        return (obj || new SVox()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SVox.getSizePrefixedRootAsSVox = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SVox()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SVox.prototype.header = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    SVox.prototype.headerLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SVox.prototype.headerArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    SVox.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    SVox.prototype.version = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    SVox.prototype.revision = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    SVox.prototype.scale = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 1.0;
    };
    SVox.prototype.stackAxis = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : stack_axis_1.StackAxis.UP;
    };
    SVox.prototype.stackSnapPosition = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    SVox.prototype.stackSnapScale = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    SVox.prototype.frames = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? (obj || new svox_chunk_1.SVoxChunk()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    SVox.prototype.framesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SVox.startSVox = function (builder) {
        builder.startObject(9);
    };
    SVox.addHeader = function (builder, headerOffset) {
        builder.addFieldOffset(0, headerOffset, 0);
    };
    SVox.createHeaderVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    SVox.startHeaderVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    SVox.addName = function (builder, nameOffset) {
        builder.addFieldOffset(1, nameOffset, 0);
    };
    SVox.addVersion = function (builder, version) {
        builder.addFieldInt32(2, version, 0);
    };
    SVox.addRevision = function (builder, revision) {
        builder.addFieldInt32(3, revision, 0);
    };
    SVox.addScale = function (builder, scale) {
        builder.addFieldFloat32(4, scale, 1.0);
    };
    SVox.addStackAxis = function (builder, stackAxis) {
        builder.addFieldInt8(5, stackAxis, stack_axis_1.StackAxis.UP);
    };
    SVox.addStackSnapPosition = function (builder, stackSnapPosition) {
        builder.addFieldInt8(6, +stackSnapPosition, +false);
    };
    SVox.addStackSnapScale = function (builder, stackSnapScale) {
        builder.addFieldInt8(7, +stackSnapScale, +false);
    };
    SVox.addFrames = function (builder, framesOffset) {
        builder.addFieldOffset(8, framesOffset, 0);
    };
    SVox.createFramesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    SVox.startFramesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    SVox.endSVox = function (builder) {
        var offset = builder.endObject();
        builder.requiredField(offset, 4); // header
        builder.requiredField(offset, 20); // frames
        return offset;
    };
    SVox.finishSVoxBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    SVox.finishSizePrefixedSVoxBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    SVox.createSVox = function (builder, headerOffset, nameOffset, version, revision, scale, stackAxis, stackSnapPosition, stackSnapScale, framesOffset) {
        SVox.startSVox(builder);
        SVox.addHeader(builder, headerOffset);
        SVox.addName(builder, nameOffset);
        SVox.addVersion(builder, version);
        SVox.addRevision(builder, revision);
        SVox.addScale(builder, scale);
        SVox.addStackAxis(builder, stackAxis);
        SVox.addStackSnapPosition(builder, stackSnapPosition);
        SVox.addStackSnapScale(builder, stackSnapScale);
        SVox.addFrames(builder, framesOffset);
        return SVox.endSVox(builder);
    };
    return SVox;
}());
exports.SVox = SVox;
