"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.PVox = void 0;
var flatbuffers = require("flatbuffers");
var stack_axis_1 = require("../pvox/stack-axis");
var vox_chunk_1 = require("../pvox/vox-chunk");
var PVox = /** @class */ (function () {
    function PVox() {
        this.bb = null;
        this.bb_pos = 0;
    }
    PVox.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    PVox.getRootAsPVox = function (bb, obj) {
        return (obj || new PVox()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PVox.getSizePrefixedRootAsPVox = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PVox()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PVox.prototype.header = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    PVox.prototype.headerLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    PVox.prototype.headerArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    PVox.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    PVox.prototype.version = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    PVox.prototype.revision = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    PVox.prototype.scale = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 1.0;
    };
    PVox.prototype.stackAxis = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : stack_axis_1.StackAxis.UP;
    };
    PVox.prototype.stackSnapPosition = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    PVox.prototype.stackSnapScale = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    PVox.prototype.frames = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? (obj || new vox_chunk_1.VoxChunk()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    PVox.prototype.framesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    PVox.startPVox = function (builder) {
        builder.startObject(9);
    };
    PVox.addHeader = function (builder, headerOffset) {
        builder.addFieldOffset(0, headerOffset, 0);
    };
    PVox.createHeaderVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    PVox.startHeaderVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    PVox.addName = function (builder, nameOffset) {
        builder.addFieldOffset(1, nameOffset, 0);
    };
    PVox.addVersion = function (builder, version) {
        builder.addFieldInt32(2, version, 0);
    };
    PVox.addRevision = function (builder, revision) {
        builder.addFieldInt32(3, revision, 0);
    };
    PVox.addScale = function (builder, scale) {
        builder.addFieldFloat32(4, scale, 1.0);
    };
    PVox.addStackAxis = function (builder, stackAxis) {
        builder.addFieldInt8(5, stackAxis, stack_axis_1.StackAxis.UP);
    };
    PVox.addStackSnapPosition = function (builder, stackSnapPosition) {
        builder.addFieldInt8(6, +stackSnapPosition, +false);
    };
    PVox.addStackSnapScale = function (builder, stackSnapScale) {
        builder.addFieldInt8(7, +stackSnapScale, +false);
    };
    PVox.addFrames = function (builder, framesOffset) {
        builder.addFieldOffset(8, framesOffset, 0);
    };
    PVox.createFramesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    PVox.startFramesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    PVox.endPVox = function (builder) {
        var offset = builder.endObject();
        builder.requiredField(offset, 4); // header
        builder.requiredField(offset, 20); // frames
        return offset;
    };
    PVox.finishPVoxBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    PVox.finishSizePrefixedPVoxBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    PVox.createPVox = function (builder, headerOffset, nameOffset, version, revision, scale, stackAxis, stackSnapPosition, stackSnapScale, framesOffset) {
        PVox.startPVox(builder);
        PVox.addHeader(builder, headerOffset);
        PVox.addName(builder, nameOffset);
        PVox.addVersion(builder, version);
        PVox.addRevision(builder, revision);
        PVox.addScale(builder, scale);
        PVox.addStackAxis(builder, stackAxis);
        PVox.addStackSnapPosition(builder, stackSnapPosition);
        PVox.addStackSnapScale(builder, stackSnapScale);
        PVox.addFrames(builder, framesOffset);
        return PVox.endPVox(builder);
    };
    return PVox;
}());
exports.PVox = PVox;
